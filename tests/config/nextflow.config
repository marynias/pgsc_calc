params {
    outdir = "output/"
    publish_dir_mode = "copy"
    enable_conda = false
    singularity_pull_docker_container = false
    min_overlap = 0.75
    max_memory = "4.GB"
    max_cpus = 2
}

process {
    cpus = 2
    memory = 4.GB
    time = 1.h
    publishDir = { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" }

    withName: PLINK2_SCORE {
        ext.args2 = null  // disable compression to read scorefiles in tests
    }

    withName: PLINK2_VCF {
        // prevent file name overlap when composing tests with plink2_vcf input
        ext.prefix = 'vcf_'
    }
}

def platform = "$PROFILE" == 'arm' ? '--platform linux/arm64' : '--platform linux/amd64'
def mount_home = "-v $HOME:$HOME"

if ("$PROFILE" == "singularity") {
    singularity.enabled = true
    singularity.autoMounts = true
} else if ("$PROFILE" == "conda") {
    conda.enabled = true
} else if ("$PROFILE" == "arm") {
    docker.enabled         = true
    docker.userEmulation   = false
    docker.runOptions      = [mount_home].join(' ')    
} else {
    docker.enabled = true
    docker.userEmulation = true
    docker.runOptions      = [mount_home].join(' ')
}

// Increase time available to build Conda environment
conda { createTimeout = "120 min" }

// Load test_data.config containing paths to test data
includeConfig 'test_data.config'

manifest {
    nextflowVersion = '!>=21.10.3'
}

hg19_chain = "https://hgdownload.cse.ucsc.edu/goldenpath/hg19/liftOver/hg19ToHg38.over.chain.gz"
hg38_chain = "https://hgdownload.soe.ucsc.edu/goldenPath/hg38/liftOver/hg38ToHg19.over.chain.gz"
